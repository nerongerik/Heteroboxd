// <auto-generated />
using System;
using Heteroboxd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Heteroboxd.Migrations
{
    [DbContext(typeof(HeteroboxdContext))]
    partial class HeteroboxdContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.Property<Guid>("LikedCommentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LikedCommentsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLikedComments", (string)null);
                });

            modelBuilder.Entity("Heteroboxd.Models.Celebrity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("DescriptionLocked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NameLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PictureUrlLocked")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Celebrities");
                });

            modelBuilder.Entity("Heteroboxd.Models.CelebrityCredit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CelebrityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CelebrityId");

                    b.HasIndex("FilmId");

                    b.ToTable("CelebrityCredits");
                });

            modelBuilder.Entity("Heteroboxd.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Flags")
                        .HasColumnType("integer");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<bool>("NotificationsOn")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Heteroboxd.Models.Film", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackdropUrl")
                        .HasColumnType("text");

                    b.Property<bool>("BackdropUrlLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("FavoriteCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("text");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PosterUrlLocked")
                        .HasColumnType("boolean");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SynopsisLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TitleLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("TmdbId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("TmdbId")
                        .IsUnique();

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Heteroboxd.Models.ListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserListId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WatchlistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserListId");

                    b.HasIndex("WatchlistId");

                    b.ToTable("ListEntries");
                });

            modelBuilder.Entity("Heteroboxd.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Heteroboxd.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Heteroboxd.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uuid");

                    b.Property<int>("Flags")
                        .HasColumnType("integer");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<bool>("NotificationsOn")
                        .HasColumnType("boolean");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<bool>("Spoiler")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FilmId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Heteroboxd.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Heteroboxd.Models.UserFavorites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Film1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Film2")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Film3")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Film4")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Film5")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("Heteroboxd.Models.UserList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NotificationsOn")
                        .HasColumnType("boolean");

                    b.Property<bool>("Ranked")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("UserLists");
                });

            modelBuilder.Entity("Heteroboxd.Models.Watchlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Watchlists");
                });

            modelBuilder.Entity("ReviewUser", b =>
                {
                    b.Property<Guid>("LikedReviewsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LikedReviewsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLikedReviews", (string)null);
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowersId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFollowers", (string)null);
                });

            modelBuilder.Entity("UserUser1", b =>
                {
                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uuid");

                    b.HasKey("FollowingId", "User1Id");

                    b.HasIndex("User1Id");

                    b.ToTable("UserFollowing", (string)null);
                });

            modelBuilder.Entity("UserUser2", b =>
                {
                    b.Property<Guid>("BlockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uuid");

                    b.HasKey("BlockedId", "User2Id");

                    b.HasIndex("User2Id");

                    b.ToTable("UserBlocked", (string)null);
                });

            modelBuilder.Entity("UserUserList", b =>
                {
                    b.Property<Guid>("LikedListsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LikedListsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLikedLists", (string)null);
                });

            modelBuilder.Entity("UserWatchedFilm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateWatched")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uuid");

                    b.Property<int>("TimesWatched")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWatchedFilms");
                });

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.HasOne("Heteroboxd.Models.Comment", null)
                        .WithMany()
                        .HasForeignKey("LikedCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heteroboxd.Models.CelebrityCredit", b =>
                {
                    b.HasOne("Heteroboxd.Models.Celebrity", null)
                        .WithMany("Credits")
                        .HasForeignKey("CelebrityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heteroboxd.Models.Film", null)
                        .WithMany("CastAndCrew")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heteroboxd.Models.Comment", b =>
                {
                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heteroboxd.Models.Review", null)
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heteroboxd.Models.ListEntry", b =>
                {
                    b.HasOne("Heteroboxd.Models.UserList", null)
                        .WithMany("Films")
                        .HasForeignKey("UserListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Heteroboxd.Models.Watchlist", null)
                        .WithMany("Films")
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Heteroboxd.Models.Notification", b =>
                {
                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heteroboxd.Models.Report", b =>
                {
                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany("Reports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Heteroboxd.Models.Review", b =>
                {
                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heteroboxd.Models.Film", null)
                        .WithMany("Reviews")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heteroboxd.Models.UserFavorites", b =>
                {
                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithOne("Favorites")
                        .HasForeignKey("Heteroboxd.Models.UserFavorites", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heteroboxd.Models.UserList", b =>
                {
                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany("Lists")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heteroboxd.Models.Watchlist", b =>
                {
                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithOne("Watchlist")
                        .HasForeignKey("Heteroboxd.Models.Watchlist", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReviewUser", b =>
                {
                    b.HasOne("Heteroboxd.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("LikedReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser1", b =>
                {
                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser2", b =>
                {
                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUserList", b =>
                {
                    b.HasOne("Heteroboxd.Models.UserList", null)
                        .WithMany()
                        .HasForeignKey("LikedListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserWatchedFilm", b =>
                {
                    b.HasOne("Heteroboxd.Models.Film", null)
                        .WithMany("WatchedBy")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heteroboxd.Models.User", null)
                        .WithMany("WatchedFilms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heteroboxd.Models.Celebrity", b =>
                {
                    b.Navigation("Credits");
                });

            modelBuilder.Entity("Heteroboxd.Models.Film", b =>
                {
                    b.Navigation("CastAndCrew");

                    b.Navigation("Reviews");

                    b.Navigation("WatchedBy");
                });

            modelBuilder.Entity("Heteroboxd.Models.Review", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Heteroboxd.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites")
                        .IsRequired();

                    b.Navigation("Lists");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("WatchedFilms");

                    b.Navigation("Watchlist")
                        .IsRequired();
                });

            modelBuilder.Entity("Heteroboxd.Models.UserList", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("Heteroboxd.Models.Watchlist", b =>
                {
                    b.Navigation("Films");
                });
#pragma warning restore 612, 618
        }
    }
}
